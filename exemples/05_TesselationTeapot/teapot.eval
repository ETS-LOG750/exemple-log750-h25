#version 460 core

//layout (quads, equal_spacing, ccw) in;
layout (quads, fractional_odd_spacing, ccw) in;

out vec3 fNormal;

layout(location = 0) uniform mat4  MV;
layout(location = 1) uniform mat3 MVnormal;
layout(location = 2) uniform mat4  P;

//----------------------------------------------------------------------------
// Bezier coefficient
vec4 bezierPoint( vec4 p0, vec4 p1, vec4 p2, vec4 p3, float t) 
{
    return (1-t)*(1-t)*(1-t)*p0 
        + 3*t*(1-t)*(1-t)*p1
        + 3*t*t*(1-t)*p2
        + t*t*t*p3;
}

vec4 bezierTangent(vec4 p0, vec4 p1, vec4 p2, vec4 p3, float t) {
    // Get the derivative of bezierPoint from t
    return 3*(1-t)*(1-t)*(p1 - p0) 
        + 6*t*(1-t)*(p2 - p1)
        + 3*t*t*(p3 - p2);
}


//----------------------------------------------------------------------------

void main()
{
    // UV tesselation from 
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    
    // Compute the position
    vec4 pos = bezierPoint(
        bezierPoint(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_in[2].gl_Position, gl_in[3].gl_Position, u),
        bezierPoint(gl_in[4].gl_Position, gl_in[5].gl_Position, gl_in[6].gl_Position, gl_in[7].gl_Position, u),
        bezierPoint(gl_in[8].gl_Position, gl_in[9].gl_Position, gl_in[10].gl_Position, gl_in[11].gl_Position, u),
        bezierPoint(gl_in[12].gl_Position, gl_in[13].gl_Position, gl_in[14].gl_Position, gl_in[15].gl_Position, u),
        v
    );

    // Calcul de la normale
    vec4 tv = bezierTangent(
        bezierPoint(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_in[2].gl_Position, gl_in[3].gl_Position, u),
        bezierPoint(gl_in[4].gl_Position, gl_in[5].gl_Position, gl_in[6].gl_Position, gl_in[7].gl_Position, u),
        bezierPoint(gl_in[8].gl_Position, gl_in[9].gl_Position, gl_in[10].gl_Position, gl_in[11].gl_Position, u),
        bezierPoint(gl_in[12].gl_Position, gl_in[13].gl_Position, gl_in[14].gl_Position, gl_in[15].gl_Position, u),
        v
    );
    vec4 tu = bezierTangent(
        bezierPoint(gl_in[0].gl_Position, gl_in[4].gl_Position, gl_in[8].gl_Position, gl_in[12].gl_Position, v),
        bezierPoint(gl_in[1].gl_Position, gl_in[5].gl_Position, gl_in[9].gl_Position, gl_in[13].gl_Position, v),
        bezierPoint(gl_in[2].gl_Position, gl_in[6].gl_Position, gl_in[10].gl_Position, gl_in[14].gl_Position, v),
        bezierPoint(gl_in[3].gl_Position, gl_in[7].gl_Position, gl_in[11].gl_Position, gl_in[15].gl_Position, v),
        u
    );

    vec3 dnormal = cross(vec3(tu), vec3(tv));
    if(dnormal == vec3(0.0)) {
        // Case we have a degenerate normal
        dnormal = vec3(0.0, 0.0, -1.0+2.0*step(0.5, gl_in[0].gl_Position));
    } else {
        dnormal = normalize(dnormal);
    }

    gl_Position = P * MV * pos;
    fNormal = MVnormal * dnormal;
}
